class UsersController < ApplicationController
  # The user must be logged in before the user can edit or update the user's profile
  # The before filter is added for the actions index, edit, update and destroy
  before_filter :signed_in_user,      only: [:index, :edit, :update, :destroy, :following, :followers]
  # The user should be the correct user in order to edit or update the user's profile
  before_filter :correct_user,        only: [:edit, :update]
  # Only admin users can issue destroy actions
  before_filter :admin_user,          only: [:destroy]
  # Only non-signed-in users can access the new and create actions, i.e. Signed-in users cannot access #new and #create
  before_filter :non_signed_in_user,  only: [:new, :create] # only for the actions #new and #create, check that the user is not sign-ed in

  def index
    @users = User.paginate(page: params[:page]) # params[:page] is generated by will_paginate
  end

  def show
    @user = User.find(params[:id])
    @microposts = @user.microposts.paginate(page: params[:page] ) # Paginate works through microposts association
  end

  def new
    @user = User.new
  end

  def create
    @user = User.new(params[:user])
    if @user.save
      sign_in @user
      flash[:success] = "Welcome to the Sample App!"
      redirect_to @user
    else
      render 'new'
    end
  end



  def edit
    #@user = User.find(params[:id]) # omitted because of before_filter correct_user 
  end

  def update
    #@user = User.find(params[:id]) # omitted because of before_filter correct_user
    if @user.update_attributes(params[:user])
      # Handle a successful update
      flash[:success] = "Profile updated!"
      sign_in @user
      redirect_to @user
    else
      render 'edit'
    end
  end

  def destroy
    @user = User.find(params[:id]) # Find the user that is currently referenced in the request
    if current_user?(@user) and current_user.admin? # If the current user is also the same user and an admin
      redirect_to users_url, notice: "Admin cannot delete their own accounts."
    else
      User.find(params[:id]).destroy
      flash[:success] = "User destroyed."
      redirect_to users_url
    end
  end

  def following
    @title = "Following"
    @user = User.find(params[:id])
    @users = @user.followed_users.paginate(page: params[:page] )
    render 'show_follow'
  end

  def followers
    @title = "Followers"
    @user = User.find(params[:id])
    @users = @user.followers.paginate(page: params[:page] )
    render 'show_follow'
  end

  private
    def non_signed_in_user
      unless not signed_in?
        redirect_to current_user, notice: "You are currently signed in and cannot create new accounts." # notice is shortcut for flash[:notice], can pass this as an options hash to redirect_to
      end
    end

    def correct_user
      @user = User.find(params[:id])                      # @user is the user as given by the current url: /users/1, params refers to the sessions hash
      redirect_to(root_path) unless current_user?(@user)  # current_user - from cookie token on the client
    end

    def admin_user
      redirect_to(root_path) unless current_user.admin?
    end

end
